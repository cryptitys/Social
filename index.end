<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cryptitys v3 | Rede Social Futurista</title>
    <style>
        /* === VARI√ÅVEIS E RESET === */
        :root {
            --bg: #0a0a0a;
            --panel: #121212;
            --accent: #7b68ee;
            --primary: #4169e1;
            --muted: #aaa;
            --radius: 16px;
            --gap: 16px;
            --maxw: 1200px;
            --danger: #e74c3c;
            --success: #2ecc71;
            --warning: #f39c12;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Inter', 'Segoe UI', system-ui, -apple-system, sans-serif;
        }

        html, body {
            height: 100%;
            background: linear-gradient(180deg, #060606, var(--bg));
            color: #eee;
            transition: all 0.3s;
            scroll-behavior: smooth;
        }

        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding-top: 70px;
        }

        /* === TYPOGRAPHY === */
        h1, h2, h3, h4, h5, h6 {
            margin-bottom: 0.5rem;
            font-weight: 600;
        }

        p {
            line-height: 1.5;
            margin-bottom: 1rem;
        }

        /* === NAVBAR === */
        .navbar {
            width: 100%;
            backdrop-filter: blur(12px);
            background: rgba(18, 18, 18, 0.85);
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 24px;
            position: fixed;
            top: 0;
            z-index: 1000;
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
        }

        .logo {
            font-weight: 700;
            font-size: 24px;
            background: linear-gradient(135deg, var(--primary), var(--accent));
            -webkit-background-clip: text;
            color: transparent;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .nav-links {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .nav-btn {
            padding: 8px 14px;
            border-radius: 12px;
            border: none;
            background: var(--panel);
            color: inherit;
            cursor: pointer;
            transition: 0.3s;
            font-weight: 500;
        }

        .nav-btn:hover {
            box-shadow: 0 0 10px var(--accent);
            transform: translateY(-2px);
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary), var(--accent));
            color: #fff;
            box-shadow: 0 6px 20px rgba(65, 105, 225, 0.3);
        }

        /* === BUTTONS === */
        .btn {
            cursor: pointer;
            border-radius: 12px;
            padding: 8px 12px;
            background: var(--panel);
            border: 1px solid rgba(255, 255, 255, 0.05);
            color: inherit;
            transition: 0.3s;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 6px;
        }

        .btn:hover {
            box-shadow: 0 0 12px var(--accent);
            transform: translateY(-2px);
        }

        .btn-danger {
            background: linear-gradient(135deg, var(--danger), #c0392b);
            color: white;
        }

        .btn-success {
            background: linear-gradient(135deg, var(--success), #27ae60);
            color: white;
        }

        .btn-small {
            padding: 6px 10px;
            font-size: 0.85rem;
        }

        /* === LAYOUT === */
        .container {
            display: grid;
            grid-template-columns: 1fr 300px;
            gap: 20px;
            padding: 24px;
            width: 100%;
            max-width: var(--maxw);
            flex: 1;
        }

        .feed-section {
            display: flex;
            flex-direction: column;
            gap: 16px;
        }

        .panel {
            background: var(--panel);
            padding: 16px;
            border-radius: var(--radius);
            border: 1px solid rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
        }

        .card {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .sidebar {
            display: flex;
            flex-direction: column;
            gap: 16px;
        }

        /* === FORM ELEMENTS === */
        input, textarea {
            width: 100%;
            padding: 10px;
            border-radius: 12px;
            border: 1px solid rgba(255, 255, 255, 0.05);
            background: #070707;
            color: #eee;
            margin-bottom: 10px;
            font-size: 1rem;
            transition: 0.3s;
        }

        input:focus, textarea:focus {
            outline: none;
            border-color: var(--accent);
            box-shadow: 0 0 0 2px rgba(123, 104, 238, 0.2);
        }

        textarea {
            min-height: 120px;
            resize: vertical;
        }

        .post-actions {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-top: 8px;
            justify-content: flex-start;
            flex-wrap: wrap;
        }

        /* === POSTS === */
        .posts {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .post {
            background: linear-gradient(180deg, rgba(255, 255, 255, 0.02), transparent);
            padding: 16px;
            border-radius: 12px;
            position: relative;
            transition: 0.3s;
            animation: fadeIn 0.5s ease-out;
        }

        .post:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
        }

        .post h4 {
            margin: 0;
            margin-bottom: 6px;
            font-size: 1.2rem;
        }

        .meta {
            color: var(--muted);
            font-size: 13px;
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 8px;
        }

        .actions {
            display: flex;
            gap: 8px;
            margin-top: 12px;
        }

        .action-like, .action-dislike {
            transition: 0.3s;
        }

        .action-like.active {
            background: rgba(46, 204, 113, 0.2);
            color: var(--success);
        }

        .action-dislike.active {
            background: rgba(231, 76, 60, 0.2);
            color: var(--danger);
        }

        .badge {
            display: inline-flex;
            align-items: center;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
        }

        .badge-admin {
            background: linear-gradient(135deg, var(--primary), var(--accent));
            color: white;
        }

        .badge-new {
            background: var(--success);
            color: white;
        }

        /* === MODALS === */
        .modal-backdrop {
            position: fixed;
            inset: 0;
            background: rgba(0, 0, 0, 0.7);
            display: none;
            align-items: center;
            justify-content: center;
            padding: 16px;
            z-index: 2000;
            animation: fadeIn 0.3s ease-out;
        }

        .modal {
            background: var(--panel);
            padding: 24px;
            border-radius: 16px;
            width: 100%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
            animation: slideUp 0.3s ease-out;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 16px;
            padding-bottom: 12px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .modal-close {
            background: none;
            border: none;
            color: var(--muted);
            font-size: 1.5rem;
            cursor: pointer;
            transition: 0.3s;
        }

        .modal-close:hover {
            color: white;
            transform: scale(1.1);
        }

        /* === USER ONLINE === */
        .user-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 8px;
            border-radius: 8px;
            transition: 0.3s;
            margin-bottom: 8px;
        }

        .user-item:hover {
            background: rgba(255, 255, 255, 0.05);
            transform: translateX(5px);
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            border: 2px solid var(--primary);
            object-fit: cover;
        }

        .user-info {
            flex: 1;
        }

        .user-name {
            font-weight: 600;
            font-size: 0.9rem;
        }

        .user-status {
            font-size: 0.75rem;
            color: var(--muted);
        }

        /* === FOOTER === */
        footer {
            margin-top: 32px;
            color: var(--muted);
            font-size: 13px;
            text-align: center;
            padding: 16px;
            width: 100%;
            border-top: 1px solid rgba(255, 255, 255, 0.05);
        }

        /* === ANIMATIONS === */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideUp {
            from { transform: translateY(30px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .pulse {
            animation: pulse 0.5s ease-in-out;
        }

        /* === RESPONSIVE === */
        @media (max-width: 900px) {
            .container {
                grid-template-columns: 1fr;
            }
            
            .sidebar {
                order: -1;
            }
            
            .navbar {
                flex-direction: column;
                gap: 8px;
                padding: 12px;
            }
            
            .nav-links {
                width: 100%;
                justify-content: center;
            }
        }

        @media (max-width: 600px) {
            .container {
                padding: 16px;
            }
            
            .post-actions {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .actions {
                flex-wrap: wrap;
            }
        }

        /* === SCROLL TO TOP === */
        .scroll-to-top {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: var(--primary);
            color: white;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: none;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 100;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            transition: 0.3s;
        }

        .scroll-to-top:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.4);
        }

        /* === UTILITY CLASSES === */
        .text-center {
            text-align: center;
        }
        
        .text-muted {
            color: var(--muted);
        }
        
        .mb-1 {
            margin-bottom: 8px;
        }
        
        .mb-2 {
            margin-bottom: 16px;
        }
        
        .mt-1 {
            margin-top: 8px;
        }
        
        .mt-2 {
            margin-top: 16px;
        }
        
        .hidden {
            display: none;
        }
        
        .flex {
            display: flex;
        }
        
        .flex-between {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .w-100 {
            width: 100%;
        }
    </style>
</head>
<body>
    <!-- Top Navbar -->
    <header class="navbar">
        <div class="logo">üí† Cryptitys v3</div>
        <nav class="nav-links">
            <button id="btn-feed" class="nav-btn">Feed</button>
            <button id="btn-post" class="nav-btn btn-primary">Novo Post</button>
            <button id="btn-community" class="nav-btn">Explorar</button>
            <div id="user-info" class="flex-between">
                <span id="user-display">Conectando...</span>
            </div>
        </nav>
    </header>

    <!-- Main layout -->
    <main class="container">
        <!-- Feed -->
        <section class="feed-section">
            <div class="panel" id="new-post-panel">
                <h2>Criar Novo Post</h2>
                <input id="post-title" placeholder="T√≠tulo do post..." maxlength="100">
                <textarea id="post-desc" placeholder="Escreva algo interessante..." maxlength="1000"></textarea>
                <div class="post-actions">
                    <button class="btn btn-primary" id="send-post">Publicar</button>
                    <button class="btn" id="clear-post">Limpar</button>
                    <span id="posts-count" class="text-muted">Posts: 0</span>
                </div>
            </div>
            
            <div class="panel flex-between">
                <h3>Feed Principal</h3>
                <div>
                    <button class="btn btn-small" id="btn-refresh">Atualizar</button>
                    <button class="btn btn-small" id="btn-sort">Ordenar: Recentes</button>
                </div>
            </div>
            
            <div id="posts" class="posts"></div>
        </section>

        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="panel card">
                <h3>Painel R√°pido</h3>
                <button class="btn w-100" id="btn-profile">Meu Perfil</button>
                <button class="btn w-100" id="btn-login">Entrar</button>
                <button class="btn w-100" id="btn-register">Registrar</button>
                <button class="btn w-100 hidden" id="btn-logout">Sair</button>
            </div>
            
            <div class="panel card">
                <div class="flex-between mb-1">
                    <h3>Usu√°rios Online</h3>
                    <span id="online-count" class="badge badge-admin">0</span>
                </div>
                <div id="users-online"></div>
            </div>
            
            <div class="panel card">
                <h3>Estat√≠sticas</h3>
                <div class="text-muted">
                    <div class="flex-between">
                        <span>Total de Posts:</span>
                        <span id="stats-posts">0</span>
                    </div>
                    <div class="flex-between">
                        <span>Total de Usu√°rios:</span>
                        <span id="stats-users">0</span>
                    </div>
                    <div class="flex-between">
                        <span>Intera√ß√µes Hoje:</span>
                        <span id="stats-interactions">0</span>
                    </div>
                </div>
            </div>
        </aside>
    </main>

    <!-- Footer -->
    <footer>
        Cryptitys v3 ‚Äî Rede Social Futurista | Criado por Cryptitys üí†
    </footer>

    <!-- Scroll to Top Button -->
    <div class="scroll-to-top" id="scroll-to-top">
        ‚Üë
    </div>

    <!-- Modals -->
    <div id="modal-backdrop" class="modal-backdrop">
        <div class="modal" id="modal-content"></div>
    </div>

    <script>
        // ===== CRYPTITYS v3 - REDE SOCIAL =====
        const DB_KEY = 'cryptitys_v3_data';
        const ADMIN_DEFAULT = { 
            username: 'admin', 
            password: 'admin', 
            isAdmin: true, 
            banned: false,
            createdAt: Date.now(),
            lastSeen: Date.now()
        };
        
        let DB = loadDB();
        let currentUser = null;
        let sortByRecent = true;

        // UI references
        const postsEl = document.getElementById('posts');
        const postsCountEl = document.getElementById('posts-count');
        const usersOnlineEl = document.getElementById('users-online');
        const onlineCountEl = document.getElementById('online-count');
        const userDisplayEl = document.getElementById('user-display');
        const statsPostsEl = document.getElementById('stats-posts');
        const statsUsersEl = document.getElementById('stats-users');
        const statsInteractionsEl = document.getElementById('stats-interactions');
        const modalBackdrop = document.getElementById('modal-backdrop');
        const modalContent = document.getElementById('modal-content');
        const scrollToTopBtn = document.getElementById('scroll-to-top');

        // ===== DATA MANAGEMENT =====
        function loadDB() {
            const raw = localStorage.getItem(DB_KEY);
            if (!raw) {
                const init = { 
                    users: [ADMIN_DEFAULT], 
                    posts: [],
                    interactions: 0
                };
                localStorage.setItem(DB_KEY, JSON.stringify(init));
                return init;
            }
            
            try {
                return JSON.parse(raw);
            } catch (e) {
                const init = { 
                    users: [ADMIN_DEFAULT], 
                    posts: [],
                    interactions: 0
                };
                localStorage.setItem(DB_KEY, JSON.stringify(init));
                return init;
            }
        }

        function saveDB() {
            localStorage.setItem(DB_KEY, JSON.stringify(DB));
        }

        function now() {
            return Date.now();
        }

        function uid() {
            return Math.floor(Math.random() * 1e9).toString(16);
        }

        // ===== AUTHENTICATION =====
        function register(username, password) {
            if (!username || username.length < 3) {
                showAlert('Nome de usu√°rio deve ter pelo menos 3 caracteres', 'warning');
                return false;
            }
            
            if (!password || password.length < 3) {
                showAlert('Senha deve ter pelo menos 3 caracteres', 'warning');
                return false;
            }
            
            if (DB.users.some(u => u.username.toLowerCase() === username.toLowerCase())) {
                showAlert('Usu√°rio j√° existe', 'warning');
                return false;
            }
            
            const newUser = {
                username,
                password,
                isAdmin: false,
                banned: false,
                createdAt: now(),
                lastSeen: now()
            };
            
            DB.users.push(newUser);
            saveDB();
            
            showAlert('Conta criada com sucesso!', 'success');
            login(username, password);
            return true;
        }

        function login(username, password) {
            const user = DB.users.find(u => u.username === username && u.password === password);
            
            if (!user) {
                showAlert('Usu√°rio ou senha incorretos', 'warning');
                return false;
            }
            
            if (user.banned) {
                showAlert('Esta conta foi banida', 'danger');
                return false;
            }
            
            // Update last seen
            user.lastSeen = now();
            saveDB();
            
            currentUser = { ...user };
            updateUIForUser();
            closeModal();
            
            showAlert(`Bem-vindo de volta, ${username}!`, 'success');
            return true;
        }

        function logout() {
            currentUser = null;
            updateUIForUser();
            showAlert('Voc√™ saiu da sua conta', 'info');
        }

        function updateUIForUser() {
            if (currentUser) {
                userDisplayEl.textContent = `${currentUser.username} ${currentUser.isAdmin ? 'üëë' : ''}`;
                document.getElementById('btn-login').classList.add('hidden');
                document.getElementById('btn-register').classList.add('hidden');
                document.getElementById('btn-logout').classList.remove('hidden');
                document.getElementById('new-post-panel').classList.remove('hidden');
            } else {
                userDisplayEl.textContent = 'Visitante';
                document.getElementById('btn-login').classList.remove('hidden');
                document.getElementById('btn-register').classList.remove('hidden');
                document.getElementById('btn-logout').classList.add('hidden');
                document.getElementById('new-post-panel').classList.add('hidden');
            }
        }

        // ===== POST MANAGEMENT =====
        function createPost(title, description) {
            if (!currentUser) {
                showAlert('Voc√™ precisa estar logado para postar', 'warning');
                return false;
            }
            
            if (currentUser.banned) {
                showAlert('Usu√°rios banidos n√£o podem postar', 'danger');
                return false;
            }
            
            if (!title || title.length < 3) {
                showAlert('T√≠tulo deve ter pelo menos 3 caracteres', 'warning');
                return false;
            }
            
            if (!description || description.length < 10) {
                showAlert('Descri√ß√£o deve ter pelo menos 10 caracteres', 'warning');
                return false;
            }
            
            const newPost = {
                id: uid(),
                username: currentUser.username,
                title: escapeHTML(title),
                description: escapeHTML(description),
                timestamp: now(),
                likes: [],
                dislikes: [],
                comments: []
            };
            
            DB.posts.unshift(newPost);
            saveDB();
            
            // Animation for new post
            const postElement = document.querySelector(`[data-id="${newPost.id}"]`);
            if (postElement) {
                postElement.classList.add('pulse');
                setTimeout(() => postElement.classList.remove('pulse'), 500);
            }
            
            refreshUI();
            showAlert('Post publicado com sucesso!', 'success');
            return true;
        }

        function deletePost(id) {
            const post = DB.posts.find(p => p.id === id);
            
            if (!post) return false;
            
            if (!currentUser || (currentUser.username !== post.username && !currentUser.isAdmin)) {
                showAlert('Voc√™ n√£o tem permiss√£o para excluir este post', 'warning');
                return false;
            }
            
            if (confirm('Tem certeza que deseja excluir este post?')) {
                DB.posts = DB.posts.filter(p => p.id !== id);
                saveDB();
                refreshUI();
                showAlert('Post exclu√≠do com sucesso', 'info');
                return true;
            }
            
            return false;
        }

        function toggleLike(postId) {
            if (!currentUser) {
                showAlert('Voc√™ precisa estar logado para curtir posts', 'warning');
                return false;
            }
            
            if (currentUser.banned) {
                showAlert('Usu√°rios banidos n√£o podem interagir', 'danger');
                return false;
            }
            
            const post = DB.posts.find(p => p.id === postId);
            if (!post) return false;
            
            const hasLiked = post.likes.includes(currentUser.username);
            const hasDisliked = post.dislikes.includes(currentUser.username);
            
            if (hasLiked) {
                // Remove like
                post.likes = post.likes.filter(u => u !== currentUser.username);
            } else {
                // Add like, remove dislike if exists
                post.likes.push(currentUser.username);
                if (hasDisliked) {
                    post.dislikes = post.dislikes.filter(u => u !== currentUser.username);
                }
            }
            
            DB.interactions++;
            saveDB();
            refreshUI();
            return true;
        }

        function toggleDislike(postId) {
            if (!currentUser) {
                showAlert('Voc√™ precisa estar logado para descurtir posts', 'warning');
                return false;
            }
            
            if (currentUser.banned) {
                showAlert('Usu√°rios banidos n√£o podem interagir', 'danger');
                return false;
            }
            
            const post = DB.posts.find(p => p.id === postId);
            if (!post) return false;
            
            const hasLiked = post.likes.includes(currentUser.username);
            const hasDisliked = post.dislikes.includes(currentUser.username);
            
            if (hasDisliked) {
                // Remove dislike
                post.dislikes = post.dislikes.filter(u => u !== currentUser.username);
            } else {
                // Add dislike, remove like if exists
                post.dislikes.push(currentUser.username);
                if (hasLiked) {
                    post.likes = post.likes.filter(u => u !== currentUser.username);
                }
            }
            
            DB.interactions++;
            saveDB();
            refreshUI();
            return true;
        }

        function addComment(postId, text) {
            if (!currentUser) {
                showAlert('Voc√™ precisa estar logado para comentar', 'warning');
                return false;
            }
            
            if (currentUser.banned) {
                showAlert('Usu√°rios banidos n√£o podem comentar', 'danger');
                return false;
            }
            
            if (!text || text.trim().length < 1) {
                showAlert('Coment√°rio n√£o pode estar vazio', 'warning');
                return false;
            }
            
            const post = DB.posts.find(p => p.id === postId);
            if (!post) return false;
            
            const newComment = {
                id: uid(),
                username: currentUser.username,
                text: escapeHTML(text.trim()),
                timestamp: now()
            };
            
            post.comments.unshift(newComment);
            DB.interactions++;
            saveDB();
            
            showAlert('Coment√°rio adicionado!', 'success');
            return true;
        }

        // ===== UI RENDERING =====
        function refreshUI() {
            renderPosts();
            renderUsersOnline();
            updateStats();
            
            postsCountEl.textContent = `Posts: ${DB.posts.length}`;
        }

        function renderPosts() {
            if (DB.posts.length === 0) {
                postsEl.innerHTML = `
                    <div class="panel text-center">
                        <h3>Nenhum post ainda</h3>
                        <p class="text-muted">Seja o primeiro a compartilhar algo interessante!</p>
                    </div>
                `;
                return;
            }
            
            let sortedPosts = [...DB.posts];
            
            if (sortByRecent) {
                sortedPosts.sort((a, b) => b.timestamp - a.timestamp);
            } else {
                // Sort by popularity (likes - dislikes)
                sortedPosts.sort((a, b) => {
                    const aScore = a.likes.length - a.dislikes.length;
                    const bScore = b.likes.length - b.dislikes.length;
                    return bScore - aScore;
                });
            }
            
            postsEl.innerHTML = sortedPosts.map(post => postHTML(post)).join('');
            attachPostListeners();
        }

        function postHTML(post) {
            const isAuthor = currentUser && currentUser.username === post.username;
            const canDelete = isAuthor || (currentUser && currentUser.isAdmin);
            const liked = currentUser ? post.likes.includes(currentUser.username) : false;
            const disliked = currentUser ? post.dislikes.includes(currentUser.username) : false;
            const avatar = `https://api.dicebear.com/9.x/identicon/svg?seed=${encodeURIComponent(post.username)}`;
            const isNew = (now() - post.timestamp) < 300000; // 5 minutes
            
            return `
            <div class="post" data-id="${post.id}">
                <div class="flex-between mb-1">
                    <div class="meta">
                        <img src="${avatar}" alt="${post.username}" class="user-avatar">
                        <div>
                            <strong>${escapeHTML(post.username)}</strong>
                            ${post.username === 'admin' ? '<span class="badge badge-admin">ADMIN</span>' : ''}
                            ${isNew ? '<span class="badge badge-new">NOVO</span>' : ''}
                        </div>
                    </div>
                    <div class="text-muted">${timeAgo(post.timestamp)}</div>
                </div>
                
                <h4>${post.title}</h4>
                <p>${post.description}</p>
                
                <div class="actions">
                    <button class="btn action-like ${liked ? 'active' : ''}" data-id="${post.id}">
                        üëç ${post.likes.length}
                    </button>
                    <button class="btn action-dislike ${disliked ? 'active' : ''}" data-id="${post.id}">
                        üëé ${post.dislikes.length}
                    </button>
                    <button class="btn" data-id="${post.id}" onclick="showComments('${post.id}')">
                        üí¨ ${post.comments.length}
                    </button>
                    ${canDelete ? `<button class="btn btn-danger btn-delete" data-id="${post.id}">Excluir</button>` : ''}
                </div>
            </div>`;
        }

        function attachPostListeners() {
            postsEl.querySelectorAll('.action-like').forEach(btn => {
                btn.onclick = () => toggleLike(btn.dataset.id);
            });
            
            postsEl.querySelectorAll('.action-dislike').forEach(btn => {
                btn.onclick = () => toggleDislike(btn.dataset.id);
            });
            
            postsEl.querySelectorAll('.btn-delete').forEach(btn => {
                btn.onclick = () => deletePost(btn.dataset.id);
            });
        }

        function renderUsersOnline() {
            const nowTime = now();
            const onlineUsers = DB.users.filter(u => (nowTime - u.lastSeen) < 300000); // 5 minutes
            
            onlineCountEl.textContent = onlineUsers.length;
            
            if (onlineUsers.length === 0) {
                usersOnlineEl.innerHTML = '<p class="text-muted text-center">Nenhum usu√°rio online</p>';
                return;
            }
            
            usersOnlineEl.innerHTML = onlineUsers.slice(0, 10).map(user => {
                const avatar = `https://api.dicebear.com/9.x/identicon/svg?seed=${encodeURIComponent(user.username)}`;
                const status = user.isAdmin ? 'Admin' : 'Online';
                
                return `
                <div class="user-item">
                    <img src="${avatar}" alt="${user.username}" class="user-avatar">
                    <div class="user-info">
                        <div class="user-name">${escapeHTML(user.username)} ${user.isAdmin ? 'üëë' : ''}</div>
                        <div class="user-status">${status}</div>
                    </div>
                </div>`;
            }).join('');
        }

        function updateStats() {
            statsPostsEl.textContent = DB.posts.length;
            statsUsersEl.textContent = DB.users.length;
            statsInteractionsEl.textContent = DB.interactions || 0;
        }

        // ===== MODAL SYSTEM =====
        function showModal(content) {
            modalContent.innerHTML = content;
            modalBackdrop.style.display = 'flex';
            
            // Add ESC key listener
            document.addEventListener('keydown', handleEscKey);
            
            // Focus trap
            const focusableElements = modalContent.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
            if (focusableElements.length > 0) {
                focusableElements[0].focus();
            }
        }

        function closeModal() {
            modalBackdrop.style.display = 'none';
            document.removeEventListener('keydown', handleEscKey);
        }

        function handleEscKey(e) {
            if (e.key === 'Escape') {
                closeModal();
            }
        }

        function showLoginModal() {
            const content = `
                <div class="modal-header">
                    <h2>Entrar na Cryptitys</h2>
                    <button class="modal-close" onclick="closeModal()">&times;</button>
                </div>
                <div class="mb-2">
                    <input type="text" id="login-username" placeholder="Nome de usu√°rio" autocomplete="username">
                    <input type="password" id="login-password" placeholder="Senha" autocomplete="current-password">
                </div>
                <div class="flex-between">
                    <button class="btn" onclick="closeModal()">Cancelar</button>
                    <button class="btn btn-primary" onclick="attemptLogin()">Entrar</button>
                </div>
                <p class="text-center mt-2 text-muted">N√£o tem uma conta? <a href="#" onclick="showRegisterModal()">Registre-se</a></p>
            `;
            
            showModal(content);
            
            // Add enter key support
            const usernameInput = document.getElementById('login-username');
            const passwordInput = document.getElementById('login-password');
            
            const handleEnter = (e) => {
                if (e.key === 'Enter') attemptLogin();
            };
            
            usernameInput.addEventListener('keypress', handleEnter);
            passwordInput.addEventListener('keypress', handleEnter);
        }

        function showRegisterModal() {
            const content = `
                <div class="modal-header">
                    <h2>Criar Conta</h2>
                    <button class="modal-close" onclick="closeModal()">&times;</button>
                </div>
                <div class="mb-2">
                    <input type="text" id="register-username" placeholder="Nome de usu√°rio" autocomplete="username">
                    <input type="password" id="register-password" placeholder="Senha" autocomplete="new-password">
                    <input type="password" id="register-confirm" placeholder="Confirmar senha" autocomplete="new-password">
                </div>
                <div class="flex-between">
                    <button class="btn" onclick="closeModal()">Cancelar</button>
                    <button class="btn btn-primary" onclick="attemptRegister()">Registrar</button>
                </div>
                <p class="text-center mt-2 text-muted">J√° tem uma conta? <a href="#" onclick="showLoginModal()">Entre aqui</a></p>
            `;
            
            showModal(content);
            
            // Add enter key support
            const usernameInput = document.getElementById('register-username');
            const passwordInput = document.getElementById('register-password');
            const confirmInput = document.getElementById('register-confirm');
            
            const handleEnter = (e) => {
                if (e.key === 'Enter') attemptRegister();
            };
            
            usernameInput.addEventListener('keypress', handleEnter);
            passwordInput.addEventListener('keypress', handleEnter);
            confirmInput.addEventListener('keypress', handleEnter);
        }

        function showComments(postId) {
            const post = DB.posts.find(p => p.id === postId);
            if (!post) return;
            
            const content = `
                <div class="modal-header">
                    <h2>Coment√°rios</h2>
                    <button class="modal-close" onclick="closeModal()">&times;</button>
                </div>
                <div class="mb-2">
                    <h3>${escapeHTML(post.title)}</h3>
                    <p class="text-muted">por ${escapeHTML(post.username)} ‚Ä¢ ${timeAgo(post.timestamp)}</p>
                </div>
                
                ${currentUser ? `
                <div class="mb-2">
                    <textarea id="comment-text" placeholder="Escreva um coment√°rio..." rows="3"></textarea>
                    <button class="btn btn-primary w-100" onclick="addCommentFromModal('${postId}')">Adicionar Coment√°rio</button>
                </div>
                ` : '<p class="text-center text-muted">Fa√ßa login para comentar</p>'}
                
                <div id="comments-list" style="max-height: 300px; overflow-y: auto;">
                    ${post.comments.length > 0 ? 
                        post.comments.map(comment => `
                            <div class="user-item">
                                <img src="https://api.dicebear.com/9.x/identicon/svg?seed=${encodeURIComponent(comment.username)}" 
                                     alt="${comment.username}" class="user-avatar">
                                <div class="user-info">
                                    <div class="user-name">${escapeHTML(comment.username)}</div>
                                    <div>${comment.text}</div>
                                    <div class="user-status">${timeAgo(comment.timestamp)}</div>
                                </div>
                            </div>
                        `).join('') 
                        : '<p class="text-center text-muted">Nenhum coment√°rio ainda</p>'
                    }
                </div>
            `;
            
            showModal(content);
            
            // Scroll to bottom of comments
            const commentsList = document.getElementById('comments-list');
            if (commentsList) {
                commentsList.scrollTop = commentsList.scrollHeight;
            }
        }

        // ===== MODAL ACTIONS =====
        function attemptLogin() {
            const username = document.getElementById('login-username').value.trim();
            const password = document.getElementById('login-password').value;
            
            if (!username || !password) {
                showAlert('Preencha todos os campos', 'warning');
                return;
            }
            
            login(username, password);
        }

        function attemptRegister() {
            const username = document.getElementById('register-username').value.trim();
            const password = document.getElementById('register-password').value;
            const confirm = document.getElementById('register-confirm').value;
            
            if (!username || !password || !confirm) {
                showAlert('Preencha todos os campos', 'warning');
                return;
            }
            
            if (password !== confirm) {
                showAlert('As senhas n√£o coincidem', 'warning');
                return;
            }
            
            register(username, password);
        }

        function addCommentFromModal(postId) {
            const text = document.getElementById('comment-text').value;
            
            if (addComment(postId, text)) {
                // Refresh the comments modal
                showComments(postId);
            }
        }

        // ===== UTILITY FUNCTIONS =====
        function escapeHTML(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function timeAgo(timestamp) {
            const seconds = Math.floor((now() - timestamp) / 1000);
            
            if (seconds < 60) return 'Agora';
            if (seconds < 3600) return `${Math.floor(seconds / 60)} min atr√°s`;
            if (seconds < 86400) return `${Math.floor(seconds / 3600)} h atr√°s`;
            return `${Math.floor(seconds / 86400)} d atr√°s`;
        }

        function showAlert(message, type = 'info') {
            // Create alert element
            const alert = document.createElement('div');
            alert.className = `panel ${type === 'success' ? 'border-left: 4px solid var(--success)' : 
                                          type === 'warning' ? 'border-left: 4px solid var(--warning)' : 
                                          type === 'danger' ? 'border-left: 4px solid var(--danger)' : 
                                          'border-left: 4px solid var(--primary)'}`;
            alert.style.marginBottom = '16px';
            alert.style.animation = 'slideUp 0.3s ease-out';
            alert.innerHTML = `
                <div class="flex-between">
                    <span>${message}</span>
                    <button class="btn btn-small" onclick="this.parentElement.parentElement.remove()">√ó</button>
                </div>
            `;
            
            // Add to top of feed
            const feedSection = document.querySelector('.feed-section');
            feedSection.insertBefore(alert, feedSection.firstChild);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                if (alert.parentElement) {
                    alert.remove();
                }
            }, 5000);
        }

        function toggleSort() {
            sortByRecent = !sortByRecent;
            document.getElementById('btn-sort').textContent = `Ordenar: ${sortByRecent ? 'Recentes' : 'Populares'}`;
            refreshUI();
        }

        // ===== INITIALIZATION =====
        function init() {
            // Load initial data
            DB = loadDB();
            refreshUI();
            updateUIForUser();
            
            // Check if user was previously logged in (simplified)
            const savedUser = localStorage.getItem('cryptitys_current_user');
            if (savedUser) {
                try {
                    const userData = JSON.parse(savedUser);
                    const user = DB.users.find(u => u.username === userData.username && u.password === userData.password);
                    if (user && !user.banned) {
                        currentUser = { ...user };
                        updateUIForUser();
                    }
                } catch (e) {
                    // Invalid saved user data
                }
            }
            
            // Set up auto-refresh
            setInterval(() => {
                DB = loadDB();
                if (currentUser) {
                    const freshUser = DB.users.find(u => u.username === currentUser.username);
                    if (freshUser) {
                        currentUser = { ...freshUser };
                        updateUIForUser();
                    }
                }
                refreshUI();
            }, 5000);
            
            // Set up scroll to top button
            window.addEventListener('scroll', () => {
                if (window.pageYOffset > 300) {
                    scrollToTopBtn.style.display = 'flex';
                } else {
                    scrollToTopBtn.style.display = 'none';
                }
            });
            
            scrollToTopBtn.addEventListener('click', () => {
                window.scrollTo({ top: 0, behavior: 'smooth' });
            });
            
            // Close modal when clicking backdrop
            modalBackdrop.addEventListener('click', (e) => {
                if (e.target === modalBackdrop) {
                    closeModal();
                }
            });
        }

        // ===== EVENT LISTENERS =====
        document.getElementById('send-post').addEventListener('click', () => {
            const title = document.getElementById('post-title').value.trim();
            const desc = document.getElementById('post-desc').value.trim();
            
            if (createPost(title, desc)) {
                document.getElementById('post-title').value = '';
                document.getElementById('post-desc').value = '';
            }
        });

        document.getElementById('clear-post').addEventListener('click', () => {
            document.getElementById('post-title').value = '';
            document.getElementById('post-desc').value = '';
        });

        document.getElementById('btn-login').addEventListener('click', showLoginModal);
        document.getElementById('btn-register').addEventListener('click', showRegisterModal);
        document.getElementById('btn-logout').addEventListener('click', logout);
        document.getElementById('btn-refresh').addEventListener('click', refreshUI);
        document.getElementById('btn-sort').addEventListener('click', toggleSort);
        document.getElementById('btn-profile').addEventListener('click', () => {
            if (currentUser) {
                showAlert(`Bem-vindo ao seu perfil, ${currentUser.username}!`, 'info');
            } else {
                showLoginModal();
            }
        });

        // Initialize the application
        init();
    </script>
</body>
  </html>
